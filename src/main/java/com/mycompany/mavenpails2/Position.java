
package com.mycompany.mavenpails2;
/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Position implements org.apache.thrift.TBase<Position, Position._Fields>, java.io.Serializable, Cloneable, Comparable<Position> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Position");

  private static final org.apache.thrift.protocol.TField POSX_FIELD_DESC = new org.apache.thrift.protocol.TField("posx", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField POSY_FIELD_DESC = new org.apache.thrift.protocol.TField("posy", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField POSZ_FIELD_DESC = new org.apache.thrift.protocol.TField("posz", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PositionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PositionTupleSchemeFactory());
  }

  public int posx; // required
  public int posy; // required
  public int posz; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    POSX((short)1, "posx"),
    POSY((short)2, "posy"),
    POSZ((short)3, "posz");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // POSX
          return POSX;
        case 2: // POSY
          return POSY;
        case 3: // POSZ
          return POSZ;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __POSX_ISSET_ID = 0;
  private static final int __POSY_ISSET_ID = 1;
  private static final int __POSZ_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.POSX, new org.apache.thrift.meta_data.FieldMetaData("posx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POSY, new org.apache.thrift.meta_data.FieldMetaData("posy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POSZ, new org.apache.thrift.meta_data.FieldMetaData("posz", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Position.class, metaDataMap);
  }

  public Position() {
  }

  public Position(
    int posx,
    int posy,
    int posz)
  {
    this();
    this.posx = posx;
    setPosxIsSet(true);
    this.posy = posy;
    setPosyIsSet(true);
    this.posz = posz;
    setPoszIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Position(Position other) {
    __isset_bitfield = other.__isset_bitfield;
    this.posx = other.posx;
    this.posy = other.posy;
    this.posz = other.posz;
  }

  public Position deepCopy() {
    return new Position(this);
  }

  @Override
  public void clear() {
    setPosxIsSet(false);
    this.posx = 0;
    setPosyIsSet(false);
    this.posy = 0;
    setPoszIsSet(false);
    this.posz = 0;
  }

  public int getPosx() {
    return this.posx;
  }

  public Position setPosx(int posx) {
    this.posx = posx;
    setPosxIsSet(true);
    return this;
  }

  public void unsetPosx() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSX_ISSET_ID);
  }

  /** Returns true if field posx is set (has been assigned a value) and false otherwise */
  public boolean isSetPosx() {
    return EncodingUtils.testBit(__isset_bitfield, __POSX_ISSET_ID);
  }

  public void setPosxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSX_ISSET_ID, value);
  }

  public int getPosy() {
    return this.posy;
  }

  public Position setPosy(int posy) {
    this.posy = posy;
    setPosyIsSet(true);
    return this;
  }

  public void unsetPosy() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSY_ISSET_ID);
  }

  /** Returns true if field posy is set (has been assigned a value) and false otherwise */
  public boolean isSetPosy() {
    return EncodingUtils.testBit(__isset_bitfield, __POSY_ISSET_ID);
  }

  public void setPosyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSY_ISSET_ID, value);
  }

  public int getPosz() {
    return this.posz;
  }

  public Position setPosz(int posz) {
    this.posz = posz;
    setPoszIsSet(true);
    return this;
  }

  public void unsetPosz() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSZ_ISSET_ID);
  }

  /** Returns true if field posz is set (has been assigned a value) and false otherwise */
  public boolean isSetPosz() {
    return EncodingUtils.testBit(__isset_bitfield, __POSZ_ISSET_ID);
  }

  public void setPoszIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSZ_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case POSX:
      if (value == null) {
        unsetPosx();
      } else {
        setPosx((Integer)value);
      }
      break;

    case POSY:
      if (value == null) {
        unsetPosy();
      } else {
        setPosy((Integer)value);
      }
      break;

    case POSZ:
      if (value == null) {
        unsetPosz();
      } else {
        setPosz((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case POSX:
      return Integer.valueOf(getPosx());

    case POSY:
      return Integer.valueOf(getPosy());

    case POSZ:
      return Integer.valueOf(getPosz());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case POSX:
      return isSetPosx();
    case POSY:
      return isSetPosy();
    case POSZ:
      return isSetPosz();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Position)
      return this.equals((Position)that);
    return false;
  }

  public boolean equals(Position that) {
    if (that == null)
      return false;

    boolean this_present_posx = true;
    boolean that_present_posx = true;
    if (this_present_posx || that_present_posx) {
      if (!(this_present_posx && that_present_posx))
        return false;
      if (this.posx != that.posx)
        return false;
    }

    boolean this_present_posy = true;
    boolean that_present_posy = true;
    if (this_present_posy || that_present_posy) {
      if (!(this_present_posy && that_present_posy))
        return false;
      if (this.posy != that.posy)
        return false;
    }

    boolean this_present_posz = true;
    boolean that_present_posz = true;
    if (this_present_posz || that_present_posz) {
      if (!(this_present_posz && that_present_posz))
        return false;
      if (this.posz != that.posz)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Position other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPosx()).compareTo(other.isSetPosx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.posx, other.posx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosy()).compareTo(other.isSetPosy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.posy, other.posy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosz()).compareTo(other.isSetPosz());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosz()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.posz, other.posz);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Position(");
    boolean first = true;

    sb.append("posx:");
    sb.append(this.posx);
    first = false;
    if (!first) sb.append(", ");
    sb.append("posy:");
    sb.append(this.posy);
    first = false;
    if (!first) sb.append(", ");
    sb.append("posz:");
    sb.append(this.posz);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PositionStandardSchemeFactory implements SchemeFactory {
    public PositionStandardScheme getScheme() {
      return new PositionStandardScheme();
    }
  }

  private static class PositionStandardScheme extends StandardScheme<Position> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Position struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // POSX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.posx = iprot.readI32();
              struct.setPosxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // POSY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.posy = iprot.readI32();
              struct.setPosyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // POSZ
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.posz = iprot.readI32();
              struct.setPoszIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Position struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(POSX_FIELD_DESC);
      oprot.writeI32(struct.posx);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POSY_FIELD_DESC);
      oprot.writeI32(struct.posy);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POSZ_FIELD_DESC);
      oprot.writeI32(struct.posz);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PositionTupleSchemeFactory implements SchemeFactory {
    public PositionTupleScheme getScheme() {
      return new PositionTupleScheme();
    }
  }

  private static class PositionTupleScheme extends TupleScheme<Position> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Position struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPosx()) {
        optionals.set(0);
      }
      if (struct.isSetPosy()) {
        optionals.set(1);
      }
      if (struct.isSetPosz()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetPosx()) {
        oprot.writeI32(struct.posx);
      }
      if (struct.isSetPosy()) {
        oprot.writeI32(struct.posy);
      }
      if (struct.isSetPosz()) {
        oprot.writeI32(struct.posz);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Position struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.posx = iprot.readI32();
        struct.setPosxIsSet(true);
      }
      if (incoming.get(1)) {
        struct.posy = iprot.readI32();
        struct.setPosyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.posz = iprot.readI32();
        struct.setPoszIsSet(true);
      }
    }
  }

}

